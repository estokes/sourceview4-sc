// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    #[doc(alias = "GtkSourceCompletionActivation")]
    pub struct CompletionActivation: u32 {
        #[doc(alias = "GTK_SOURCE_COMPLETION_ACTIVATION_NONE")]
        const NONE = ffi::GTK_SOURCE_COMPLETION_ACTIVATION_NONE as u32;
        #[doc(alias = "GTK_SOURCE_COMPLETION_ACTIVATION_INTERACTIVE")]
        const INTERACTIVE = ffi::GTK_SOURCE_COMPLETION_ACTIVATION_INTERACTIVE as u32;
        #[doc(alias = "GTK_SOURCE_COMPLETION_ACTIVATION_USER_REQUESTED")]
        const USER_REQUESTED = ffi::GTK_SOURCE_COMPLETION_ACTIVATION_USER_REQUESTED as u32;
    }
}

impl fmt::Display for CompletionActivation {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for CompletionActivation {
    type GlibType = ffi::GtkSourceCompletionActivation;

    fn into_glib(self) -> ffi::GtkSourceCompletionActivation {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceCompletionActivation> for CompletionActivation {
    unsafe fn from_glib(value: ffi::GtkSourceCompletionActivation) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for CompletionActivation {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_completion_activation_get_type()) }
    }
}

impl glib::value::ValueType for CompletionActivation {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for CompletionActivation {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for CompletionActivation {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "GtkSourceFileSaverFlags")]
    pub struct FileSaverFlags: u32 {
        #[doc(alias = "GTK_SOURCE_FILE_SAVER_FLAGS_NONE")]
        const NONE = ffi::GTK_SOURCE_FILE_SAVER_FLAGS_NONE as u32;
        #[doc(alias = "GTK_SOURCE_FILE_SAVER_FLAGS_IGNORE_INVALID_CHARS")]
        const IGNORE_INVALID_CHARS = ffi::GTK_SOURCE_FILE_SAVER_FLAGS_IGNORE_INVALID_CHARS as u32;
        #[doc(alias = "GTK_SOURCE_FILE_SAVER_FLAGS_IGNORE_MODIFICATION_TIME")]
        const IGNORE_MODIFICATION_TIME = ffi::GTK_SOURCE_FILE_SAVER_FLAGS_IGNORE_MODIFICATION_TIME as u32;
        #[doc(alias = "GTK_SOURCE_FILE_SAVER_FLAGS_CREATE_BACKUP")]
        const CREATE_BACKUP = ffi::GTK_SOURCE_FILE_SAVER_FLAGS_CREATE_BACKUP as u32;
    }
}

impl fmt::Display for FileSaverFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for FileSaverFlags {
    type GlibType = ffi::GtkSourceFileSaverFlags;

    fn into_glib(self) -> ffi::GtkSourceFileSaverFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceFileSaverFlags> for FileSaverFlags {
    unsafe fn from_glib(value: ffi::GtkSourceFileSaverFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for FileSaverFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_file_saver_flags_get_type()) }
    }
}

impl glib::value::ValueType for FileSaverFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FileSaverFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for FileSaverFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "GtkSourceGutterRendererState")]
    pub struct GutterRendererState: u32 {
        #[doc(alias = "GTK_SOURCE_GUTTER_RENDERER_STATE_NORMAL")]
        const NORMAL = ffi::GTK_SOURCE_GUTTER_RENDERER_STATE_NORMAL as u32;
        #[doc(alias = "GTK_SOURCE_GUTTER_RENDERER_STATE_CURSOR")]
        const CURSOR = ffi::GTK_SOURCE_GUTTER_RENDERER_STATE_CURSOR as u32;
        #[doc(alias = "GTK_SOURCE_GUTTER_RENDERER_STATE_PRELIT")]
        const PRELIT = ffi::GTK_SOURCE_GUTTER_RENDERER_STATE_PRELIT as u32;
        #[doc(alias = "GTK_SOURCE_GUTTER_RENDERER_STATE_SELECTED")]
        const SELECTED = ffi::GTK_SOURCE_GUTTER_RENDERER_STATE_SELECTED as u32;
    }
}

impl fmt::Display for GutterRendererState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for GutterRendererState {
    type GlibType = ffi::GtkSourceGutterRendererState;

    fn into_glib(self) -> ffi::GtkSourceGutterRendererState {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceGutterRendererState> for GutterRendererState {
    unsafe fn from_glib(value: ffi::GtkSourceGutterRendererState) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for GutterRendererState {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_gutter_renderer_state_get_type()) }
    }
}

impl glib::value::ValueType for GutterRendererState {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for GutterRendererState {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for GutterRendererState {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "GtkSourceSortFlags")]
    pub struct SortFlags: u32 {
        #[doc(alias = "GTK_SOURCE_SORT_FLAGS_NONE")]
        const NONE = ffi::GTK_SOURCE_SORT_FLAGS_NONE as u32;
        #[doc(alias = "GTK_SOURCE_SORT_FLAGS_CASE_SENSITIVE")]
        const CASE_SENSITIVE = ffi::GTK_SOURCE_SORT_FLAGS_CASE_SENSITIVE as u32;
        #[doc(alias = "GTK_SOURCE_SORT_FLAGS_REVERSE_ORDER")]
        const REVERSE_ORDER = ffi::GTK_SOURCE_SORT_FLAGS_REVERSE_ORDER as u32;
        #[doc(alias = "GTK_SOURCE_SORT_FLAGS_REMOVE_DUPLICATES")]
        const REMOVE_DUPLICATES = ffi::GTK_SOURCE_SORT_FLAGS_REMOVE_DUPLICATES as u32;
    }
}

impl fmt::Display for SortFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for SortFlags {
    type GlibType = ffi::GtkSourceSortFlags;

    fn into_glib(self) -> ffi::GtkSourceSortFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceSortFlags> for SortFlags {
    unsafe fn from_glib(value: ffi::GtkSourceSortFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for SortFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_sort_flags_get_type()) }
    }
}

impl glib::value::ValueType for SortFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SortFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for SortFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "GtkSourceSpaceLocationFlags")]
    pub struct SpaceLocationFlags: u32 {
        #[doc(alias = "GTK_SOURCE_SPACE_LOCATION_NONE")]
        const NONE = ffi::GTK_SOURCE_SPACE_LOCATION_NONE as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_LOCATION_LEADING")]
        const LEADING = ffi::GTK_SOURCE_SPACE_LOCATION_LEADING as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_LOCATION_INSIDE_TEXT")]
        const INSIDE_TEXT = ffi::GTK_SOURCE_SPACE_LOCATION_INSIDE_TEXT as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_LOCATION_TRAILING")]
        const TRAILING = ffi::GTK_SOURCE_SPACE_LOCATION_TRAILING as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_LOCATION_ALL")]
        const ALL = ffi::GTK_SOURCE_SPACE_LOCATION_ALL as u32;
    }
}

impl fmt::Display for SpaceLocationFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for SpaceLocationFlags {
    type GlibType = ffi::GtkSourceSpaceLocationFlags;

    fn into_glib(self) -> ffi::GtkSourceSpaceLocationFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceSpaceLocationFlags> for SpaceLocationFlags {
    unsafe fn from_glib(value: ffi::GtkSourceSpaceLocationFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for SpaceLocationFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_space_location_flags_get_type()) }
    }
}

impl glib::value::ValueType for SpaceLocationFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SpaceLocationFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for SpaceLocationFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "GtkSourceSpaceTypeFlags")]
    pub struct SpaceTypeFlags: u32 {
        #[doc(alias = "GTK_SOURCE_SPACE_TYPE_NONE")]
        const NONE = ffi::GTK_SOURCE_SPACE_TYPE_NONE as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_TYPE_SPACE")]
        const SPACE = ffi::GTK_SOURCE_SPACE_TYPE_SPACE as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_TYPE_TAB")]
        const TAB = ffi::GTK_SOURCE_SPACE_TYPE_TAB as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_TYPE_NEWLINE")]
        const NEWLINE = ffi::GTK_SOURCE_SPACE_TYPE_NEWLINE as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_TYPE_NBSP")]
        const NBSP = ffi::GTK_SOURCE_SPACE_TYPE_NBSP as u32;
        #[doc(alias = "GTK_SOURCE_SPACE_TYPE_ALL")]
        const ALL = ffi::GTK_SOURCE_SPACE_TYPE_ALL as u32;
    }
}

impl fmt::Display for SpaceTypeFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for SpaceTypeFlags {
    type GlibType = ffi::GtkSourceSpaceTypeFlags;

    fn into_glib(self) -> ffi::GtkSourceSpaceTypeFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkSourceSpaceTypeFlags> for SpaceTypeFlags {
    unsafe fn from_glib(value: ffi::GtkSourceSpaceTypeFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for SpaceTypeFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gtk_source_space_type_flags_get_type()) }
    }
}

impl glib::value::ValueType for SpaceTypeFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SpaceTypeFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for SpaceTypeFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
