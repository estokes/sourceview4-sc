// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Buffer;
use crate::SearchSettings;
use crate::Style;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "GtkSourceSearchContext")]
    pub struct SearchContext(Object<ffi::GtkSourceSearchContext, ffi::GtkSourceSearchContextClass>);

    match fn {
        type_ => || ffi::gtk_source_search_context_get_type(),
    }
}

impl SearchContext {
    pub const NONE: Option<&'static SearchContext> = None;

    #[doc(alias = "gtk_source_search_context_new")]
    pub fn new(
        buffer: &impl IsA<Buffer>,
        settings: Option<&impl IsA<SearchSettings>>,
    ) -> SearchContext {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gtk_source_search_context_new(
                buffer.as_ref().to_glib_none().0,
                settings.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`SearchContext`] objects.
    ///
    /// This method returns an instance of [`SearchContextBuilder`](crate::builders::SearchContextBuilder) which can be used to create [`SearchContext`] objects.
    pub fn builder() -> SearchContextBuilder {
        SearchContextBuilder::default()
    }
}

impl Default for SearchContext {
    fn default() -> Self {
        glib::object::Object::new::<Self>(&[])
            .expect("Can't construct SearchContext object with default parameters")
    }
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`SearchContext`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct SearchContextBuilder {
    buffer: Option<Buffer>,
    highlight: Option<bool>,
    match_style: Option<Style>,
    settings: Option<SearchSettings>,
}

impl SearchContextBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`SearchContextBuilder`].
    pub fn new() -> Self {
        Self::default()
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`SearchContext`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> SearchContext {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref buffer) = self.buffer {
            properties.push(("buffer", buffer));
        }
        if let Some(ref highlight) = self.highlight {
            properties.push(("highlight", highlight));
        }
        if let Some(ref match_style) = self.match_style {
            properties.push(("match-style", match_style));
        }
        if let Some(ref settings) = self.settings {
            properties.push(("settings", settings));
        }
        glib::Object::new::<SearchContext>(&properties)
            .expect("Failed to create an instance of SearchContext")
    }

    pub fn buffer(mut self, buffer: &impl IsA<Buffer>) -> Self {
        self.buffer = Some(buffer.clone().upcast());
        self
    }

    pub fn highlight(mut self, highlight: bool) -> Self {
        self.highlight = Some(highlight);
        self
    }

    pub fn match_style(mut self, match_style: &Style) -> Self {
        self.match_style = Some(match_style.clone());
        self
    }

    pub fn settings(mut self, settings: &impl IsA<SearchSettings>) -> Self {
        self.settings = Some(settings.clone().upcast());
        self
    }
}

pub trait SearchContextExt: 'static {
    #[doc(alias = "gtk_source_search_context_backward")]
    fn backward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)>;

    #[doc(alias = "gtk_source_search_context_backward_async")]
    fn backward_async<
        P: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>) + Send + 'static,
    >(
        &self,
        iter: &gtk::TextIter,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    );

    fn backward_future(
        &self,
        iter: &gtk::TextIter,
    ) -> Pin<
        Box_<
            dyn std::future::Future<
                    Output = Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>,
                > + 'static,
        >,
    >;

    #[doc(alias = "gtk_source_search_context_forward")]
    fn forward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)>;

    #[doc(alias = "gtk_source_search_context_forward_async")]
    fn forward_async<
        P: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>) + Send + 'static,
    >(
        &self,
        iter: &gtk::TextIter,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    );

    fn forward_future(
        &self,
        iter: &gtk::TextIter,
    ) -> Pin<
        Box_<
            dyn std::future::Future<
                    Output = Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>,
                > + 'static,
        >,
    >;

    #[doc(alias = "gtk_source_search_context_get_buffer")]
    #[doc(alias = "get_buffer")]
    fn buffer(&self) -> Option<Buffer>;

    #[doc(alias = "gtk_source_search_context_get_highlight")]
    #[doc(alias = "get_highlight")]
    fn is_highlight(&self) -> bool;

    #[doc(alias = "gtk_source_search_context_get_match_style")]
    #[doc(alias = "get_match_style")]
    fn match_style(&self) -> Option<Style>;

    #[doc(alias = "gtk_source_search_context_get_occurrence_position")]
    #[doc(alias = "get_occurrence_position")]
    fn occurrence_position(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter) -> i32;

    #[doc(alias = "gtk_source_search_context_get_occurrences_count")]
    #[doc(alias = "get_occurrences_count")]
    fn occurrences_count(&self) -> i32;

    #[doc(alias = "gtk_source_search_context_get_regex_error")]
    #[doc(alias = "get_regex_error")]
    fn regex_error(&self) -> Option<glib::Error>;

    #[doc(alias = "gtk_source_search_context_get_settings")]
    #[doc(alias = "get_settings")]
    fn settings(&self) -> Option<SearchSettings>;

    #[doc(alias = "gtk_source_search_context_replace")]
    fn replace(
        &self,
        match_start: &mut gtk::TextIter,
        match_end: &mut gtk::TextIter,
        replace: &str,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "gtk_source_search_context_set_highlight")]
    fn set_highlight(&self, highlight: bool);

    #[doc(alias = "gtk_source_search_context_set_match_style")]
    fn set_match_style(&self, match_style: Option<&Style>);

    #[doc(alias = "highlight")]
    fn connect_highlight_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "match-style")]
    fn connect_match_style_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "occurrences-count")]
    fn connect_occurrences_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "regex-error")]
    fn connect_regex_error_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SearchContext>> SearchContextExt for O {
    fn backward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)> {
        unsafe {
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gtk_source_search_context_backward(
                self.as_ref().to_glib_none().0,
                iter.to_glib_none().0,
                match_start.to_glib_none_mut().0,
                match_end.to_glib_none_mut().0,
                has_wrapped_around.as_mut_ptr(),
            ));
            let has_wrapped_around = has_wrapped_around.assume_init();
            if ret {
                Some((match_start, match_end, from_glib(has_wrapped_around)))
            } else {
                None
            }
        }
    }

    fn backward_async<
        P: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>) + Send + 'static,
    >(
        &self,
        iter: &gtk::TextIter,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    ) {
        let user_data: Box_<P> = Box_::new(callback);
        unsafe extern "C" fn backward_async_trampoline<
            P: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::MaybeUninit::uninit();
            let _ = ffi::gtk_source_search_context_backward_finish(
                _source_object as *mut _,
                res,
                match_start.to_glib_none_mut().0,
                match_end.to_glib_none_mut().0,
                has_wrapped_around.as_mut_ptr(),
                &mut error,
            );
            let has_wrapped_around = has_wrapped_around.assume_init();
            let result = if error.is_null() {
                Ok((match_start, match_end, from_glib(has_wrapped_around)))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<P> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = backward_async_trampoline::<P>;
        unsafe {
            ffi::gtk_source_search_context_backward_async(
                self.as_ref().to_glib_none().0,
                iter.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn backward_future(
        &self,
        iter: &gtk::TextIter,
    ) -> Pin<
        Box_<
            dyn std::future::Future<
                    Output = Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>,
                > + 'static,
        >,
    > {
        let iter = iter.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.backward_async(&iter, Some(cancellable), move |res| {
                send.resolve(res);
            });
        }))
    }

    fn forward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter, bool)> {
        unsafe {
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gtk_source_search_context_forward(
                self.as_ref().to_glib_none().0,
                iter.to_glib_none().0,
                match_start.to_glib_none_mut().0,
                match_end.to_glib_none_mut().0,
                has_wrapped_around.as_mut_ptr(),
            ));
            let has_wrapped_around = has_wrapped_around.assume_init();
            if ret {
                Some((match_start, match_end, from_glib(has_wrapped_around)))
            } else {
                None
            }
        }
    }

    fn forward_async<
        P: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>) + Send + 'static,
    >(
        &self,
        iter: &gtk::TextIter,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    ) {
        let user_data: Box_<P> = Box_::new(callback);
        unsafe extern "C" fn forward_async_trampoline<
            P: FnOnce(Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let mut has_wrapped_around = mem::MaybeUninit::uninit();
            let _ = ffi::gtk_source_search_context_forward_finish(
                _source_object as *mut _,
                res,
                match_start.to_glib_none_mut().0,
                match_end.to_glib_none_mut().0,
                has_wrapped_around.as_mut_ptr(),
                &mut error,
            );
            let has_wrapped_around = has_wrapped_around.assume_init();
            let result = if error.is_null() {
                Ok((match_start, match_end, from_glib(has_wrapped_around)))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<P> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = forward_async_trampoline::<P>;
        unsafe {
            ffi::gtk_source_search_context_forward_async(
                self.as_ref().to_glib_none().0,
                iter.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn forward_future(
        &self,
        iter: &gtk::TextIter,
    ) -> Pin<
        Box_<
            dyn std::future::Future<
                    Output = Result<(gtk::TextIter, gtk::TextIter, bool), glib::Error>,
                > + 'static,
        >,
    > {
        let iter = iter.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.forward_async(&iter, Some(cancellable), move |res| {
                send.resolve(res);
            });
        }))
    }

    fn buffer(&self) -> Option<Buffer> {
        unsafe {
            from_glib_none(ffi::gtk_source_search_context_get_buffer(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn is_highlight(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_search_context_get_highlight(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn match_style(&self) -> Option<Style> {
        unsafe {
            from_glib_none(ffi::gtk_source_search_context_get_match_style(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn occurrence_position(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter) -> i32 {
        unsafe {
            ffi::gtk_source_search_context_get_occurrence_position(
                self.as_ref().to_glib_none().0,
                match_start.to_glib_none().0,
                match_end.to_glib_none().0,
            )
        }
    }

    fn occurrences_count(&self) -> i32 {
        unsafe {
            ffi::gtk_source_search_context_get_occurrences_count(self.as_ref().to_glib_none().0)
        }
    }

    fn regex_error(&self) -> Option<glib::Error> {
        unsafe {
            from_glib_full(ffi::gtk_source_search_context_get_regex_error(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn settings(&self) -> Option<SearchSettings> {
        unsafe {
            from_glib_none(ffi::gtk_source_search_context_get_settings(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn replace(
        &self,
        match_start: &mut gtk::TextIter,
        match_end: &mut gtk::TextIter,
        replace: &str,
    ) -> Result<(), glib::Error> {
        let replace_length = replace.len() as i32;
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::gtk_source_search_context_replace(
                self.as_ref().to_glib_none().0,
                match_start.to_glib_none_mut().0,
                match_end.to_glib_none_mut().0,
                replace.to_glib_none().0,
                replace_length,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn set_highlight(&self, highlight: bool) {
        unsafe {
            ffi::gtk_source_search_context_set_highlight(
                self.as_ref().to_glib_none().0,
                highlight.into_glib(),
            );
        }
    }

    fn set_match_style(&self, match_style: Option<&Style>) {
        unsafe {
            ffi::gtk_source_search_context_set_match_style(
                self.as_ref().to_glib_none().0,
                match_style.to_glib_none().0,
            );
        }
    }

    fn connect_highlight_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_highlight_trampoline<
            P: IsA<SearchContext>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GtkSourceSearchContext,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SearchContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::highlight\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_highlight_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_match_style_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_match_style_trampoline<
            P: IsA<SearchContext>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GtkSourceSearchContext,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SearchContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::match-style\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_match_style_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_occurrences_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_occurrences_count_trampoline<
            P: IsA<SearchContext>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GtkSourceSearchContext,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SearchContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::occurrences-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_occurrences_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_regex_error_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_regex_error_trampoline<
            P: IsA<SearchContext>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GtkSourceSearchContext,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SearchContext::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::regex-error\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_regex_error_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SearchContext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SearchContext")
    }
}
