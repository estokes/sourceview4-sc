// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::CompletionActivation;
use crate::CompletionContext;
use crate::CompletionInfo;
use crate::CompletionProposal;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GtkSourceCompletionProvider")]
    pub struct CompletionProvider(Interface<ffi::GtkSourceCompletionProvider, ffi::GtkSourceCompletionProviderIface>);

    match fn {
        type_ => || ffi::gtk_source_completion_provider_get_type(),
    }
}

impl CompletionProvider {
    pub const NONE: Option<&'static CompletionProvider> = None;
}

pub trait CompletionProviderExt: 'static {
    #[doc(alias = "gtk_source_completion_provider_activate_proposal")]
    fn activate_proposal(
        &self,
        proposal: &impl IsA<CompletionProposal>,
        iter: &mut gtk::TextIter,
    ) -> bool;

    #[doc(alias = "gtk_source_completion_provider_get_activation")]
    #[doc(alias = "get_activation")]
    fn activation(&self) -> CompletionActivation;

    #[doc(alias = "gtk_source_completion_provider_get_gicon")]
    #[doc(alias = "get_gicon")]
    fn gicon(&self) -> Option<gio::Icon>;

    #[doc(alias = "gtk_source_completion_provider_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<gdk_pixbuf::Pixbuf>;

    #[doc(alias = "gtk_source_completion_provider_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString>;

    #[doc(alias = "gtk_source_completion_provider_get_info_widget")]
    #[doc(alias = "get_info_widget")]
    fn info_widget(&self, proposal: &impl IsA<CompletionProposal>) -> Option<gtk::Widget>;

    #[doc(alias = "gtk_source_completion_provider_get_interactive_delay")]
    #[doc(alias = "get_interactive_delay")]
    fn interactive_delay(&self) -> i32;

    #[doc(alias = "gtk_source_completion_provider_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "gtk_source_completion_provider_get_priority")]
    #[doc(alias = "get_priority")]
    fn priority(&self) -> i32;

    #[doc(alias = "gtk_source_completion_provider_get_start_iter")]
    #[doc(alias = "get_start_iter")]
    fn start_iter(
        &self,
        context: &impl IsA<CompletionContext>,
        proposal: &impl IsA<CompletionProposal>,
    ) -> Option<gtk::TextIter>;

    #[doc(alias = "gtk_source_completion_provider_match")]
    #[doc(alias = "match")]
    fn match_(&self, context: &impl IsA<CompletionContext>) -> bool;

    #[doc(alias = "gtk_source_completion_provider_populate")]
    fn populate(&self, context: &impl IsA<CompletionContext>);

    #[doc(alias = "gtk_source_completion_provider_update_info")]
    fn update_info(&self, proposal: &impl IsA<CompletionProposal>, info: &impl IsA<CompletionInfo>);
}

impl<O: IsA<CompletionProvider>> CompletionProviderExt for O {
    fn activate_proposal(
        &self,
        proposal: &impl IsA<CompletionProposal>,
        iter: &mut gtk::TextIter,
    ) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_completion_provider_activate_proposal(
                self.as_ref().to_glib_none().0,
                proposal.as_ref().to_glib_none().0,
                iter.to_glib_none_mut().0,
            ))
        }
    }

    fn activation(&self) -> CompletionActivation {
        unsafe {
            from_glib(ffi::gtk_source_completion_provider_get_activation(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn gicon(&self) -> Option<gio::Icon> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_provider_get_gicon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn icon(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_provider_get_icon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_provider_get_icon_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn info_widget(&self, proposal: &impl IsA<CompletionProposal>) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_provider_get_info_widget(
                self.as_ref().to_glib_none().0,
                proposal.as_ref().to_glib_none().0,
            ))
        }
    }

    fn interactive_delay(&self) -> i32 {
        unsafe {
            ffi::gtk_source_completion_provider_get_interactive_delay(
                self.as_ref().to_glib_none().0,
            )
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_provider_get_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn priority(&self) -> i32 {
        unsafe { ffi::gtk_source_completion_provider_get_priority(self.as_ref().to_glib_none().0) }
    }

    fn start_iter(
        &self,
        context: &impl IsA<CompletionContext>,
        proposal: &impl IsA<CompletionProposal>,
    ) -> Option<gtk::TextIter> {
        unsafe {
            let mut iter = gtk::TextIter::uninitialized();
            let ret = from_glib(ffi::gtk_source_completion_provider_get_start_iter(
                self.as_ref().to_glib_none().0,
                context.as_ref().to_glib_none().0,
                proposal.as_ref().to_glib_none().0,
                iter.to_glib_none_mut().0,
            ));
            if ret {
                Some(iter)
            } else {
                None
            }
        }
    }

    fn match_(&self, context: &impl IsA<CompletionContext>) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_completion_provider_match(
                self.as_ref().to_glib_none().0,
                context.as_ref().to_glib_none().0,
            ))
        }
    }

    fn populate(&self, context: &impl IsA<CompletionContext>) {
        unsafe {
            ffi::gtk_source_completion_provider_populate(
                self.as_ref().to_glib_none().0,
                context.as_ref().to_glib_none().0,
            );
        }
    }

    fn update_info(
        &self,
        proposal: &impl IsA<CompletionProposal>,
        info: &impl IsA<CompletionInfo>,
    ) {
        unsafe {
            ffi::gtk_source_completion_provider_update_info(
                self.as_ref().to_glib_none().0,
                proposal.as_ref().to_glib_none().0,
                info.as_ref().to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for CompletionProvider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("CompletionProvider")
    }
}
