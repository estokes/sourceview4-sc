// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GtkSourceCompletionProposal")]
    pub struct CompletionProposal(Interface<ffi::GtkSourceCompletionProposal, ffi::GtkSourceCompletionProposalIface>);

    match fn {
        type_ => || ffi::gtk_source_completion_proposal_get_type(),
    }
}

impl CompletionProposal {
    pub const NONE: Option<&'static CompletionProposal> = None;
}

pub trait CompletionProposalExt: 'static {
    #[doc(alias = "gtk_source_completion_proposal_changed")]
    fn changed(&self);

    #[doc(alias = "gtk_source_completion_proposal_equal")]
    fn equal(&self, other: &impl IsA<CompletionProposal>) -> bool;

    #[doc(alias = "gtk_source_completion_proposal_get_gicon")]
    #[doc(alias = "get_gicon")]
    fn gicon(&self) -> Option<gio::Icon>;

    #[doc(alias = "gtk_source_completion_proposal_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<gdk_pixbuf::Pixbuf>;

    #[doc(alias = "gtk_source_completion_proposal_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString>;

    #[doc(alias = "gtk_source_completion_proposal_get_info")]
    #[doc(alias = "get_info")]
    fn info(&self) -> Option<glib::GString>;

    #[doc(alias = "gtk_source_completion_proposal_get_label")]
    #[doc(alias = "get_label")]
    fn label(&self) -> Option<glib::GString>;

    #[doc(alias = "gtk_source_completion_proposal_get_markup")]
    #[doc(alias = "get_markup")]
    fn markup(&self) -> Option<glib::GString>;

    #[doc(alias = "gtk_source_completion_proposal_get_text")]
    #[doc(alias = "get_text")]
    fn text(&self) -> Option<glib::GString>;

    #[doc(alias = "gtk_source_completion_proposal_hash")]
    fn hash(&self) -> u32;

    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_changed(&self);
}

impl<O: IsA<CompletionProposal>> CompletionProposalExt for O {
    fn changed(&self) {
        unsafe {
            ffi::gtk_source_completion_proposal_changed(self.as_ref().to_glib_none().0);
        }
    }

    fn equal(&self, other: &impl IsA<CompletionProposal>) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_completion_proposal_equal(
                self.as_ref().to_glib_none().0,
                other.as_ref().to_glib_none().0,
            ))
        }
    }

    fn gicon(&self) -> Option<gio::Icon> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_proposal_get_gicon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn icon(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_proposal_get_icon(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_proposal_get_icon_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn info(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_info(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_label(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn markup(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_markup(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn text(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_text(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn hash(&self) -> u32 {
        unsafe { ffi::gtk_source_completion_proposal_hash(self.as_ref().to_glib_none().0) }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<CompletionProposal>, F: Fn(&P) + 'static>(
            this: *mut ffi::GtkSourceCompletionProposal,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(CompletionProposal::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_changed(&self) {
        self.emit_by_name::<()>("changed", &[]);
    }
}

impl fmt::Display for CompletionProposal {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("CompletionProposal")
    }
}
